services:
  # Reverse Proxy and SSL Termination
  traefik:
    image: traefik:v3.4.4
    container_name: storied-life-infra-traefik
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=storied-life-infra
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.file.directory=/config
      - --providers.file.watch=true
      - --api.dashboard=true
      - --accesslog=true
      - --api.insecure=false
      - --log.level=INFO
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/certs:/certs
      - ./traefik/config:/config
    networks:
      - storied-life-infra
      - storied-life
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`traefik.storied-life.me`)"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls=true"

  # Authentication Service
  authentik-server:
    image: ghcr.io/goauthentik/server:2025.6.3
    container_name: storied-life-infra-authentik-server
    command: server
    env_file:
      - .env
    environment:
      - AUTHENTIK_POSTGRESQL__HOST=authentik-postgres
      - AUTHENTIK_POSTGRESQL__NAME=${AUTHENTIK_POSTGRES_DB:-authentik}
      - AUTHENTIK_POSTGRESQL__USER=${AUTHENTIK_POSTGRES_USER:-authentik}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${AUTHENTIK_POSTGRES_PASSWORD}
      - AUTHENTIK_REDIS__HOST=authentik-redis
      - AUTHENTIK_REDIS__PASSWORD=${AUTHENTIK_REDIS_PASSWORD:-}
    volumes:
      - ./authentik/media:/media
      - ./authentik/templates:/templates
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authentik.rule=Host(`auth.storied-life.me`)"
      - "traefik.http.routers.authentik.entrypoints=websecure"
      - "traefik.http.routers.authentik.tls=true"
      - "traefik.http.services.authentik.loadbalancer.server.port=9000"
      - "traefik.http.services.authentik.loadbalancer.healthcheck.port=9000"
      - "traefik.http.services.authentik.loadbalancer.healthcheck.path=/outpost.goauthentik.io/ping"
    depends_on:
      - authentik-redis
      - authentik-postgres
    networks:
      - storied-life-infra
      - storied-life
    restart: unless-stopped

  authentik-worker:
    image: ghcr.io/goauthentik/server:2025.6.3
    container_name: storied-life-infra-authentik-worker
    command: worker
    env_file:
      - .env
    environment:
      - AUTHENTIK_POSTGRESQL__HOST=authentik-postgres
      - AUTHENTIK_POSTGRESQL__NAME=${AUTHENTIK_POSTGRES_DB:-authentik}
      - AUTHENTIK_POSTGRESQL__USER=${AUTHENTIK_POSTGRES_USER:-authentik}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${AUTHENTIK_POSTGRES_PASSWORD}
      - AUTHENTIK_REDIS__HOST=authentik-redis
      - AUTHENTIK_REDIS__PASSWORD=${AUTHENTIK_REDIS_PASSWORD:-}
    volumes:
      - ./authentik/media:/media
      - ./authentik/templates:/templates
      - ./authentik/certs:/certs
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - authentik-redis
      - authentik-postgres
    networks:
      - storied-life-infra
    restart: unless-stopped

  # PostgreSQL Database for Authentik
  authentik-postgres:
    image: postgres:17-alpine
    container_name: storied-life-infra-authentik-postgres
    environment:
      - POSTGRES_DB=${AUTHENTIK_POSTGRES_DB:-authentik}
      - POSTGRES_USER=${AUTHENTIK_POSTGRES_USER:-authentik}
      - POSTGRES_PASSWORD=${AUTHENTIK_POSTGRES_PASSWORD}
    volumes:
      - authentik-postgres-data:/var/lib/postgresql/data
      - ./infrastructure/authentik/init:/docker-entrypoint-initdb.d
    networks:
      - storied-life-infra
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUTHENTIK_POSTGRES_USER:-authentik} -d ${AUTHENTIK_POSTGRES_DB:-authentik}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache for Authentik
  authentik-redis:
    image: redis:8-alpine
    container_name: storied-life-infra-authentik-redis
    command: redis-server --appendonly yes --requirepass ${AUTHENTIK_REDIS_PASSWORD:-}
    volumes:
      - authentik-redis-data:/data
    networks:
      - storied-life-infra
    restart: unless-stopped

volumes:
  authentik-postgres-data:
  authentik-redis-data:

networks:
  storied-life-infra:
    name: storied-life-infra
    driver: bridge
  storied-life:
    name: storied-life
    external: true
