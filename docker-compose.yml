
services:
  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=${VITE_API_URL:-https://remember.storied-life.me}
    container_name: storied-life-frontend
    env_file:
      - .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`remember.storied-life.me`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    networks:
      - storied-life
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: storied-life-backend
    env_file:
      - .env
    volumes:
      - ./data/uploads:/app/uploads
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.${DOMAIN:-storied-life.me}`) || PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    depends_on:
      - postgres
      - redis
    networks:
      - storied-life
    restart: unless-stopped

  # PostgreSQL Database for Application
  postgres:
    image: postgres:17-alpine
    container_name: storied-life-app-postgres
    environment:
      - POSTGRES_DB=${APP_POSTGRES_DB:-storied_life_app}
      - POSTGRES_USER=${APP_POSTGRES_USER:-storied_app}
      - POSTGRES_PASSWORD=${APP_POSTGRES_PASSWORD}
    volumes:
      - app-postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - storied-life
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${APP_POSTGRES_USER:-storied_app} -d ${APP_POSTGRES_DB:-storied_life_app}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache for Application
  redis:
    image: redis:8-alpine
    container_name: storied-life-app-redis
    command: redis-server --appendonly yes --requirepass ${APP_REDIS_PASSWORD:-}
    environment:
      - REDIS_PASSWORD=${APP_REDIS_PASSWORD:-}
    volumes:
      - app-redis-data:/data
    networks:
      - storied-life
    restart: unless-stopped

volumes:
  app-postgres-data:
  app-redis-data:

networks:
  storied-life:
    driver: bridge
