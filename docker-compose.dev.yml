services:
  # Frontend Application (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      args:
        - VITE_API_URL=https://api.storied-life.me
    container_name: storied-life-dev-frontend
    ports:
      - "3001:3001"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/index.html:/app/index.html
      - ./frontend/package.json:/app/package.json
      - ./frontend/package-lock.json:/app/package-lock.json
      - ./frontend/vite.config.ts:/app/vite.config.ts
      - ./frontend/tsconfig.json:/app/tsconfig.json
      - ./frontend/tailwind.config.js:/app/tailwind.config.js
      - ./frontend/postcss.config.js:/app/postcss.config.js
      - frontend-node-modules:/app/node_modules
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`remember.storied-life.me`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.services.frontend.loadbalancer.server.port=3001"
    networks:
      - frontend
    env_file:
      - .env.dev
    restart: unless-stopped
    depends_on:
      - backend

  # Backend API (Development)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: storied-life-dev-backend
    ports:
      - "8001:8001"
    volumes:
      - ./backend/app:/app/app
      - ./backend/main.py:/app/main.py
      - ./backend/pyproject.toml:/app/pyproject.toml
      - ./backend/uv.lock:/app/uv.lock
      - ./data/uploads:/app/uploads
    environment:
      - DATABASE_URL=postgresql://storied:${POSTGRES_PASSWORD}@postgres:5432/storied_life
    env_file:
      - .env.dev
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.storied-life.me`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.services.backend.loadbalancer.server.port=8001"
    networks:
      - frontend
    restart: unless-stopped
    depends_on:
      - postgres
      - redis

  # PostgreSQL Database for Application (Development)
  postgres:
    image: postgres:17
    container_name: storied-life-app-postgres-dev
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-storied_life}
      - POSTGRES_USER=${POSTGRES_USER:-storied}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    env_file:
      - .env.dev
    volumes:
      - app-postgres-dev-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-storied} -d ${POSTGRES_DB:-storied_life}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache for Application (Development)
  redis:
    image: redis:8-alpine
    container_name: storied-life-app-redis-dev
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - app-redis-dev-data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    env_file:
      - .env.dev
    ports:
      - "6379:6379"
    networks:
      - frontend
    restart: unless-stopped

volumes:
  app-postgres-dev-data:
  app-redis-dev-data:
  frontend-node-modules:

networks:
  frontend:
    external: true