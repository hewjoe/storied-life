services:
  # Reverse Proxy and SSL Termination
  traefik:
    image: traefik:v3.5.0
    container_name: sli-traefik-dev
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=frontend
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.file.directory=/config
      - --providers.file.watch=true
      - --api.dashboard=true
      - --accesslog=true
      - --api.insecure=false
      - --log.level=INFO
    env_file:
      - .env.dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/certs:/certs
      - ./traefik/config:/config
    networks:
      - frontend
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`traefik.storied-life.me`)"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls=true"

  # Authentication Service
  authentik-server:
    image: ghcr.io/goauthentik/server:2025.6.4
    container_name: sli-authentik-server-dev
    command: server
    environment:
      - AUTHENTIK_POSTGRESQL__HOST=authentik-postgres-dev
      - AUTHENTIK_POSTGRESQL__NAME=${AUTHENTIK_POSTGRES_DB_DEV:-authentik_dev}
      - AUTHENTIK_POSTGRESQL__USER=${AUTHENTIK_POSTGRES_USER_DEV:-authentik_dev}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${AUTHENTIK_POSTGRES_PASSWORD_DEV}
      - AUTHENTIK_REDIS__HOST=authentik-redis-dev
      - AUTHENTIK_REDIS__PASSWORD=${AUTHENTIK_REDIS_PASSWORD_DEV:-}
    env_file:
      - .env.dev
    volumes:
      - ./authentik/media:/media
      - ./authentik/templates:/templates
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authentik.rule=Host(`auth.storied-life.me`)"
      - "traefik.http.routers.authentik.entrypoints=websecure"
      - "traefik.http.routers.authentik.tls=true"
      - "traefik.http.services.authentik.loadbalancer.server.port=9000"
      - "traefik.http.services.authentik.loadbalancer.healthcheck.port=9000"
      - "traefik.http.services.authentik.loadbalancer.healthcheck.path=/outpost.goauthentik.io/ping"
    depends_on:
      - authentik-redis-dev
      - authentik-postgres-dev
    networks:
      - frontend
    restart: unless-stopped

  authentik-worker:
    image: ghcr.io/goauthentik/server:2025.6.4
    container_name: sli-authentik-worker-dev
    command: worker
    environment:
      - AUTHENTIK_POSTGRESQL__HOST=authentik-postgres-dev
      - AUTHENTIK_POSTGRESQL__NAME=${AUTHENTIK_POSTGRES_DB_DEV:-authentik_dev}
      - AUTHENTIK_POSTGRESQL__USER=${AUTHENTIK_POSTGRES_USER_DEV:-authentik_dev}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${AUTHENTIK_POSTGRES_PASSWORD_DEV}
      - AUTHENTIK_REDIS__HOST=authentik-redis-dev
      - AUTHENTIK_REDIS__PASSWORD=${AUTHENTIK_REDIS_PASSWORD_DEV:-}
    env_file:
      - .env.dev
    volumes:
      - ./authentik/media:/media
      - ./authentik/templates:/templates
      - ./authentik/certs:/certs
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - authentik-redis-dev
      - authentik-postgres-dev
    networks:
      - frontend
    restart: unless-stopped

  # PostgreSQL Database for Authentik (Development)
  authentik-postgres-dev:
    image: postgres:17
    container_name: sli-authentik-postgres-dev
    environment:
      - POSTGRES_DB=${AUTHENTIK_POSTGRES_DB_DEV:-authentik_dev}
      - POSTGRES_USER=${AUTHENTIK_POSTGRES_USER_DEV:-authentik_dev}
      - POSTGRES_PASSWORD=${AUTHENTIK_POSTGRES_PASSWORD_DEV}
    volumes:
      - authentik-postgres-dev-data:/var/lib/postgresql/data
      - ./infrastructure/authentik/init:/docker-entrypoint-initdb.d
    ports:
      - "5434:5432"
    networks:
      - frontend
    env_file:
      - .env.dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUTHENTIK_POSTGRES_USER_DEV:-authentik_dev} -d ${AUTHENTIK_POSTGRES_DB_DEV:-authentik_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache for Authentik (Development)
  authentik-redis-dev:
    image: redis:8-alpine
    container_name: sli-authentik-redis-dev
    command: >
      sh -c "
      if [ -n \"$AUTHENTIK_REDIS_PASSWORD_DEV\" ]; then
        redis-server --appendonly yes --requirepass \"$AUTHENTIK_REDIS_PASSWORD_DEV\"
      else
        redis-server --appendonly yes
      fi
      "
    volumes:
      - authentik-redis-dev-data:/data
    ports:
      - "6380:6379"
    env_file:
      - .env.dev
    networks:
      - frontend
    restart: unless-stopped

volumes:
  authentik-postgres-dev-data:
  authentik-redis-dev-data:

networks:
  frontend:
    external: true
